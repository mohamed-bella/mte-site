<%- include('../partials/admin/header') %>
     <%- include('../partials/admin/sidebar') %>

          <div class="md:pl-64 flex flex-col flex-1">
               <main class="flex-1">
                    <div class="py-6">
                         <div class="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
                              <div class="flex items-center justify-between">
                                   <h1 class="text-2xl font-semibold text-gray-900">
                                        <%= tour ? 'Edit Tour' : 'Create New Tour' %>
                                   </h1>
                                   <a href="/admin/tours" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                                        Back to Tours
                                   </a>
                              </div>
                         </div>


                         <div class="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
                              <div class="py-5">
                                   <!-- Error container for form submission errors -->
                                   <div id="form-error-container" class="hidden mb-5 rounded-md bg-red-50 p-4">
                                        <div class="flex">
                                             <div class="flex-shrink-0">
                                                  <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                       <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd" />
                                                  </svg>
                                             </div>
                                             <div class="ml-3">
                                                  <h3 class="text-sm font-medium text-red-800">Error</h3>
                                                  <div class="mt-2 text-sm text-red-700">
                                                       <p id="form-error-message"></p>
                                                  </div>
                                             </div>
                                        </div>
                                   </div>

                                   <form id="tourForm" class="space-y-8 divide-y divide-gray-200" enctype="multipart/form-data">
                                        <!-- Basic Information -->
                                        <div class="space-y-6 sm:space-y-5">
                                             <div>
                                                  <h3 class="text-lg leading-6 font-medium text-gray-900">Basic Information</h3>
                                                  <p class="mt-1 max-w-2xl text-sm text-gray-500">
                                                       Essential details about the tour.
                                                  </p>
                                             </div>

                                             <div class="space-y-6 sm:space-y-5">
                                                  <!-- Title -->
                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label for="title" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            Title *
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                            <input type="text" name="title" id="title" required value="<%= tour ? tour.title : '' %>" class="max-w-lg block w-full shadow-sm focus:ring-orange-500 focus:border-orange-500 sm:max-w-xs sm:text-sm border-gray-300 rounded-md">
                                                       </div>
                                                  </div>

                                                  <!-- Description -->
                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label for="description" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            Description *
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                            <textarea id="description" name="description" rows="4" required class="max-w-lg shadow-sm block w-full focus:ring-orange-500 focus:border-orange-500 sm:text-sm border border-gray-300 rounded-md"><%= tour ? tour.description : '' %></textarea>
                                                       </div>
                                                  </div>

                                                  <!-- Price -->
                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label for="price" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            Price (USD) *
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2 flex items-center">
                                                            <input type="number" name="price" id="price" required min="0" step="0.01" value="<%= tour ? tour.price : '' %>" class="max-w-lg block w-full shadow-sm focus:ring-orange-500 focus:border-orange-500 sm:max-w-xs sm:text-sm border-gray-300 rounded-md">
                                                            <% if (tour) { %>
                                                                 <button type="button" id="updatePriceBtn" onclick="updateTourPrice('<%= tour._id %>')" class="ml-3 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
                                                                      Update Price
                                                                 </button>
                                                                 <span id="priceUpdateSuccess" class="ml-3 text-green-600 text-sm hidden">Price updated!</span>
                                                            <% } %>
                                                       </div>
                                                  </div>

                                                  <!-- Duration -->
                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label for="duration" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            Duration (days) *
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                            <input type="number" name="duration" id="duration" required min="1" value="<%= tour ? tour.duration : '' %>" class="max-w-lg block w-full shadow-sm focus:ring-orange-500 focus:border-orange-500 sm:max-w-xs sm:text-sm border-gray-300 rounded-md">
                                                       </div>
                                                  </div>

                                                  <!-- Group Size -->
                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label for="groupSize" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            Max Group Size *
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                            <input type="number" name="groupSize" id="groupSize" required min="1" value="<%= tour ? tour.groupSize : '15' %>" class="max-w-lg block w-full shadow-sm focus:ring-orange-500 focus:border-orange-500 sm:max-w-xs sm:text-sm border-gray-300 rounded-md">
                                                       </div>
                                                  </div>

                                                  <!-- Start Location -->
                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label for="startLocation" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            Starting Location *
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                            <input type="text" name="startLocation" id="startLocation" required value="<%= tour ? tour.startLocation : '' %>" class="max-w-lg block w-full shadow-sm focus:ring-orange-500 focus:border-orange-500 sm:max-w-xs sm:text-sm border-gray-300 rounded-md">
                                                       </div>
                                                  </div>

                                                  <!-- Map -->
                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            Tour Route Map Image <%= !tour || !tour.mapImage ? '*' : '' %>
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                            <input type="file" 
                                                                   name="mapImage" 
                                                                   accept="image/*"
                                                                   <%= !tour || !tour.mapImage ? 'required' : '' %>
                                                                   class="block w-full text-sm text-gray-500
                                                                          file:mr-4 file:py-2 file:px-4
                                                                          file:rounded-full file:border-0
                                                                          file:text-sm file:font-semibold
                                                                          file:bg-orange-50 file:text-orange-700
                                                                          hover:file:bg-orange-100">
                                                            <p class="mt-2 text-sm text-gray-500">Upload a static map image showing the tour route (recommended size: 800x600px)</p>
                                                            <% if (tour && tour.mapImage) { %>
                                                                 <div class="mt-4 relative">
                                                                      <img src="<%= tour.mapImage %>" alt="Current map" class="max-w-lg rounded-lg">
                                                                      <p class="mt-2 text-sm text-orange-600">Current map image will be used unless you select a new one</p>
                                                                 </div>
                                                            <% } %>
                                                       </div>
                                                  </div>

                                                  <!-- Accommodation -->
                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label for="accommodation" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            Accommodation *
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                            <input type="text" name="accommodation" id="accommodation" required value="<%= tour ? tour.accommodation : '' %>" class="max-w-lg block w-full shadow-sm focus:ring-orange-500 focus:border-orange-500 sm:max-w-xs sm:text-sm border-gray-300 rounded-md">
                                                       </div>
                                                  </div>

                                                  <!-- Includes -->
                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label for="includes" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            What's Included *
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                            <textarea id="includes" name="includes" rows="4" required class="max-w-lg shadow-sm block w-full focus:ring-orange-500 focus:border-orange-500 sm:text-sm border border-gray-300 rounded-md" placeholder="Enter items included in the tour (one per line)"><%= tour && tour.includes ? tour.includes.join('\n') : '' %></textarea>
                                                            <p class="mt-1 text-sm text-gray-500">Enter each included item on a new line</p>
                                                       </div>
                                                  </div>

                                                  <!-- Excludes -->
                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label for="excludes" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            What's Not Included *
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                            <textarea id="excludes" name="excludes" rows="4" required class="max-w-lg shadow-sm block w-full focus:ring-orange-500 focus:border-orange-500 sm:text-sm border border-gray-300 rounded-md" placeholder="Enter items not included in the tour (one per line)"><%= tour && tour.excludes ? tour.excludes.join('\n') : '' %></textarea>
                                                            <p class="mt-1 text-sm text-gray-500">Enter each excluded item on a new line</p>
                                                       </div>
                                                  </div>
                                             </div>
                                        </div>

                                        <!-- Images Section -->
                                        <div class="pt-8 space-y-6 sm:pt-10 sm:space-y-5">
                                             <div>
                                                  <h3 class="text-lg leading-6 font-medium text-gray-900">Images</h3>
                                                  <p class="mt-1 max-w-2xl text-sm text-gray-500">
                                                       Upload tour images. First image will be the main image.
                                                  </p>
                                             </div>

                                             <div class="space-y-6 sm:space-y-5">
                                                  <% if (tour && tour.images && tour.images.length > 0) { %>
                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            Current Images
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                            <p class="mb-2 text-sm text-gray-500">
                                                                You have <%= tour.images.length %> existing images. Uploading new images will add to these images.
                                                            </p>
                                                            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                                                                <% tour.images.forEach((image, index) => { %>
                                                                <div class="relative group">
                                                                    <img src="<%= image %>" alt="Tour image <%= index + 1 %>" class="h-32 w-full object-cover rounded-md">
                                                                    <span class="absolute top-0 right-0 bg-gray-800 text-white px-2 py-1 text-xs rounded-bl-md">
                                                                         <%= index === 0 ? 'Main' : `Image ${index + 1}` %>
                                                                    </span>
                                                                    <input type="hidden" name="existingImages" value="<%= image %>">
                                                                </div>
                                                                <% }); %>
                                                            </div>
                                                       </div>
                                                  </div>
                                                  <% } %>

                                                  <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                       <label class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                            <%= tour && tour.images && tour.images.length > 0 ? 'Add More Tour Images' : 'Tour Images *' %>
                                                       </label>
                                                       <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                            <input type="file" 
                                                                   name="images" 
                                                                   id="multipleImages" 
                                                                   multiple 
                                                                   accept="image/*"
                                                                   class="hidden"
                                                                   <%= !tour || !tour.images || tour.images.length === 0 ? 'required' : '' %>
                                                                   onchange="handleImageSelection(this)">
                                                            <div class="max-w-lg flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md cursor-pointer" onclick="document.getElementById('multipleImages').click()">
                                                                 <div class="space-y-1 text-center">
                                                                      <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                                                                           <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                                                      </svg>
                                                                      <div class="flex text-sm text-gray-600">
                                                                           <span><%= tour && tour.images && tour.images.length > 0 ? 'Add more images' : 'Upload images' %></span>
                                                                                </div>
                                                                      <p class="text-xs text-gray-500">
                                                                           PNG, JPG, GIF up to 10MB each (max 20 images)
                                                                      </p>
                                                                 </div>
                                                            </div>
                                                            <div id="selectedImagesPreview" class="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4">
                                                                 <!-- Selected images will be displayed here -->
                                                            </div>
                                                       </div>
                                                  </div>
                                             </div>
                                        </div>

                                        <!-- Itinerary Section -->
                                        <div class="pt-8 space-y-6 sm:pt-10 sm:space-y-5">
                                             <div>
                                                  <h3 class="text-lg leading-6 font-medium text-gray-900">Itinerary</h3>
                                                  <p class="mt-1 max-w-2xl text-sm text-gray-500">
                                                       Add day-by-day itinerary details.
                                                  </p>
                                             </div>

                                             <div id="itineraryContainer">
                                                  <% if (tour && tour.itinerary && tour.itinerary.length> 0) { %>
                                                       <% tour.itinerary.forEach((day, index)=> { %>
                                                            <div class="border-b border-gray-200 pb-5 mb-5">
                                                                 <div class="space-y-6 sm:space-y-5">
                                                                      <input type="hidden" name="itinerary[<%= index %>][day]" value="<%= day.day %>">

                                                                      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                                           <label class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                                                Day <%= day.day %> Title
                                                                           </label>
                                                                           <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                                                <input type="text" name="itinerary[<%= index %>][title]" value="<%= day.title %>" required class="max-w-lg block w-full shadow-sm focus:ring-orange-500 focus:border-orange-500 sm:text-sm border-gray-300 rounded-md">
                                                                           </div>
                                                                      </div>

                                                                      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                                                           <label class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                                                                Description
                                                                           </label>
                                                                           <div class="mt-1 sm:mt-0 sm:col-span-2">
                                                                                <textarea name="itinerary[<%= index %>][description]" rows="3" required class="max-w-lg shadow-sm block w-full focus:ring-orange-500 focus:border-orange-500 sm:text-sm border border-gray-300 rounded-md"><%= day.description %></textarea>
                                                                           </div>
                                                                      </div>

                                                                      <button type="button" onclick="removeItineraryDay(this)" class="mt-2 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                                                           Remove Day
                                                                      </button>
                                                                 </div>
                                                            </div>
                                                            <% }); %>
                                                                 <% } %>
                                             </div>

                                             <button type="button" onclick="addItineraryDay()" class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-orange-700 bg-orange-100 hover:bg-orange-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
                                                  Add Day to Itinerary
                                             </button>
                                        </div>

                                        <!-- Form Actions -->
                                        <div class="pt-5">
                                             <div class="flex justify-end">
                                                  <a href="/admin/tours" class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
                                                       Cancel
                                                  </a>
                                                  <button type="submit" id="submitBtn" class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
                                                       <span id="submitText"><%= tour ? 'Update Tour' : 'Create Tour' %></span>
                                                       <svg id="submitSpinner" class="hidden animate-spin ml-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                                       </svg>
                                                  </button>
                                             </div>
                                        </div>
                                   </form>
                              </div>
                         </div>
                    </div>
               </main>
          </div>

          <!-- JavaScript for Dynamic Form Fields -->
          <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
          <link href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" rel="stylesheet">
          
          <script>
               // Initialize map
               let map;
               let markers = [];
               let polyline;

               window.addEventListener('load', () => {
                    map = L.map('map').setView([0, 0], 2);
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                         attribution: '© OpenStreetMap contributors'
                    }).addTo(map);
               });

               // Function to display form errors
               function showFormError(message) {
                    const errorContainer = document.getElementById('form-error-container');
                    const errorMessage = document.getElementById('form-error-message');
                    
                    errorMessage.textContent = message;
                    errorContainer.classList.remove('hidden');
                    
                    // Scroll to error
                    errorContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    
                    // Hide after 10 seconds
                    setTimeout(() => {
                         errorContainer.classList.add('hidden');
                    }, 10000);
               }
               
               // Function to clear form errors
               function clearFormError() {
                    const errorContainer = document.getElementById('form-error-container');
                    errorContainer.classList.add('hidden');
               }

               // Function to handle image selection and preview
               function handleImageSelection(input) {
                    const preview = document.getElementById('selectedImagesPreview');
                    preview.innerHTML = '';
                    
                    clearFormError(); // Clear previous errors
                    
                    if (input.files && input.files.length > 0) {
                        // Check if there are too many files
                        if (input.files.length > 20) {
                            showFormError('You can only upload up to 20 images at once. Please try again with fewer images.');
                            input.value = '';
                            return;
                        }
                        
                        // Check if any file is too large (10MB limit)
                        const maxSize = 10 * 1024 * 1024; // 10MB
                        let totalSize = 0;
                        let overSizedFiles = [];
                        let emptyFiles = [];
                        
                        for (let i = 0; i < input.files.length; i++) {
                            totalSize += input.files[i].size;
                            
                            if (input.files[i].size > maxSize) {
                                overSizedFiles.push(`${input.files[i].name} (${Math.round(input.files[i].size / 1024 / 1024)}MB)`);
                            }
                            
                            if (input.files[i].size <= 0) {
                                emptyFiles.push(input.files[i].name || `File ${i+1}`);
                            }
                        }
                        
                        if (overSizedFiles.length > 0) {
                            showFormError(`The following files exceed the 10MB size limit:\n${overSizedFiles.join('\n')}\n\nPlease optimize these images and try again.`);
                            input.value = '';
                            input.dataset.hadError = 'true';
                            return;
                        }
                        
                        if (emptyFiles.length > 0) {
                            showFormError(`The following files appear to be empty or corrupted:\n${emptyFiles.join('\n')}\n\nPlease select valid image files.`);
                            input.value = '';
                            input.dataset.hadError = 'true';
                            return;
                        }
                        
                        // Add file counter
                        const fileCount = document.createElement('div');
                        fileCount.className = 'col-span-full mb-2 text-sm text-gray-700';
                        fileCount.textContent = `Selected ${input.files.length} new image${input.files.length > 1 ? 's' : ''}`;
                        preview.appendChild(fileCount);
                    
                        // Create and display each image preview
                        for (let i = 0; i < input.files.length; i++) {
                            const file = input.files[i];
                              const reader = new FileReader();
                            
                              reader.onload = function(e) {
                                const imgContainer = document.createElement('div');
                                imgContainer.className = 'relative';
                                
                                const img = document.createElement('img');
                                img.src = e.target.result;
                                img.className = 'h-32 w-full object-cover rounded-md border border-gray-300';
                                img.alt = 'Selected image preview';
                                
                                const label = document.createElement('div');
                                label.className = 'absolute bottom-0 left-0 right-0 bg-black/50 text-white px-2 py-1 text-xs truncate';
                                label.textContent = file.name;
                                
                                imgContainer.appendChild(img);
                                imgContainer.appendChild(label);
                                preview.appendChild(imgContainer);
                            }
                            
                              reader.readAsDataURL(file);
                        }
                    }
               }

               // Add Itinerary Day
               function addItineraryDay() {
                    const container = document.getElementById('itineraryContainer');
                    const dayCount = container.children.length;
                    const div = document.createElement('div');
                    div.className = 'border-b border-gray-200 pb-5 mb-5';

                    div.innerHTML = `
                         <div class="space-y-6 sm:space-y-5">
                              <input type="hidden" name="itinerary[${dayCount}][day]" value="${dayCount + 1}">
                              
                              <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                   <label class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                        Day ${dayCount + 1} Title
                                   </label>
                                   <div class="mt-1 sm:mt-0 sm:col-span-2">
                                        <input type="text" 
                                               name="itinerary[${dayCount}][title]"
                                               required
                                               class="max-w-lg block w-full shadow-sm focus:ring-orange-500 focus:border-orange-500 sm:text-sm border-gray-300 rounded-md">
                                   </div>
                              </div>
                
                              <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start">
                                   <label class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                                        Description
                                   </label>
                                   <div class="mt-1 sm:mt-0 sm:col-span-2">
                                        <textarea name="itinerary[${dayCount}][description]"
                                                  rows="3"
                                                  required
                                                  class="max-w-lg shadow-sm block w-full focus:ring-orange-500 focus:border-orange-500 sm:text-sm border border-gray-300 rounded-md"></textarea>
                                   </div>
                              </div>
                
                              <button type="button" 
                                      onclick="removeItineraryDay(this)"
                                      class="mt-2 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                   Remove Day
                              </button>
                         </div>
                    `;
                    container.appendChild(div);
                    updateItineraryDays();
               }

               // Remove Itinerary Day
               function removeItineraryDay(button) {
                    button.closest('.border-b').remove();
                    updateItineraryDays();
               }

               // Update Itinerary Day Numbers
               function updateItineraryDays() {
                    const container = document.getElementById('itineraryContainer');
                    const days = container.children;
                    Array.from(days).forEach((day, index) => {
                         const dayNum = index + 1;
                         day.querySelector('input[type="hidden"]').value = dayNum;
                         day.querySelector('label').textContent = `Day ${dayNum} Title`;
                    });
               }

               // Add initial day if no itinerary exists
               window.addEventListener('load', () => {
                    const container = document.getElementById('itineraryContainer');
                    if (container.children.length === 0) {
                         addItineraryDay();
                    }
               });

               // Validate if all file inputs are filled correctly
               function validateFileInputs() {
                    // Check the map image input
                    const mapInput = document.querySelector('input[name="mapImage"]');
                    const hasTourWithMap = <%= tour && tour.mapImage ? 'true' : 'false' %>;
                    
                    if (mapInput.required && mapInput.files.length === 0) {
                         showFormError('Please select a map image for the tour.');
                         return false;
                    }
                    
                    if (mapInput.files.length > 0 && mapInput.files[0].size <= 0) {
                         showFormError('The map image appears to be empty or corrupted. Please select a valid image file.');
                         mapInput.dataset.hadError = 'true';
                         return false;
                    }
                    
                    // Check the tour images input
                    const imageInput = document.getElementById('multipleImages');
                    const hasTourWithImages = <%= tour && tour.images && tour.images.length > 0 ? 'true' : 'false' %>;
                    
                    if (imageInput.required && imageInput.files.length === 0) {
                         showFormError('Please select at least one image for the tour.');
                         return false;
                    }
                    
                    if (imageInput.files.length > 0) {
                         let hasEmptyFile = false;
                         let emptyFileNames = [];
                         
                         for (let i = 0; i < imageInput.files.length; i++) {
                              if (imageInput.files[i].size <= 0) {
                                   hasEmptyFile = true;
                                   emptyFileNames.push(imageInput.files[i].name || `File ${i+1}`);
                              }
                         }
                         
                         if (hasEmptyFile) {
                              showFormError(`One or more tour images appear to be empty or corrupted: ${emptyFileNames.join(', ')}. Please review your image selections.`);
                              imageInput.dataset.hadError = 'true';
                              return false;
                         }
                    }
                    
                    return true;
               }

               // Handle form submission with AJAX
               document.querySelector('form').addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    clearFormError(); // Clear any existing errors
                    
                    // Validate all inputs
                    if (!validateFileInputs()) {
                         return; // Stop submission if validation fails
                    }
                    
                    const form = this;
                    const formData = new FormData();
                    
                    // Only add non-empty fields to the FormData
                    // Add basic form data fields
                    formData.append('title', form.querySelector('#title').value);
                    formData.append('description', form.querySelector('#description').value);
                    formData.append('price', form.querySelector('#price').value);
                    formData.append('duration', form.querySelector('#duration').value);
                    formData.append('groupSize', form.querySelector('#groupSize').value);
                    formData.append('startLocation', form.querySelector('#startLocation').value);
                    formData.append('accommodation', form.querySelector('#accommodation').value);
                    
                    // Only add map image if it's not empty
                    const mapInput = document.querySelector('input[name="mapImage"]');
                    if (mapInput.files.length > 0 && mapInput.files[0].size > 0) {
                         formData.append('mapImage', mapInput.files[0]);
                    }
                    
                    // Only add tour images if they're not empty
                    const imageInput = document.getElementById('multipleImages');
                    if (imageInput.files.length > 0) {
                         let hasValidFiles = false;
                         for (let i = 0; i < imageInput.files.length; i++) {
                              if (imageInput.files[i].size > 0) {
                                   formData.append('images', imageInput.files[i]);
                                   hasValidFiles = true;
                              }
                         }
                         
                         if (!hasValidFiles && imageInput.required) {
                              showFormError('Please select at least one valid image for the tour.');
                              return;
                         }
                    }
                    
                    // Convert itinerary to JSON string
                    const days = [];
                    let dayNumber = 1;
                    
                    while (form.querySelector(`input[name="itinerary[${dayNumber-1}][title]"]`)) {
                         const title = form.querySelector(`input[name="itinerary[${dayNumber-1}][title]"]`).value;
                         const description = form.querySelector(`textarea[name="itinerary[${dayNumber-1}][description]"]`).value;
                         
                         days.push({
                              day: dayNumber,
                              title,
                              description
                         });
                         
                         dayNumber++;
                    }
                    
                    // Add itinerary as JSON
                    formData.append('itinerary', JSON.stringify(days));
                    
                    // Handle existing images properly - get all values and convert to an array
                    const existingImagesInputs = form.querySelectorAll('input[name="existingImages"]');
                    if (existingImagesInputs.length > 0) {
                         // Add all existing images
                         existingImagesInputs.forEach(input => {
                             formData.append('existingImages', input.value);
                         });
                    }

                    // Convert includes and excludes textareas to arrays
                    const includes = form.querySelector('#includes').value.split('\n').filter(item => item.trim());
                    const excludes = form.querySelector('#excludes').value.split('\n').filter(item => item.trim());
                    
                    // Add includes and excludes as arrays
                    includes.forEach(item => formData.append('includes[]', item.trim()));
                    excludes.forEach(item => formData.append('excludes[]', item.trim()));
                    
                    const submitBtn = document.getElementById('submitBtn');
                    const submitText = document.getElementById('submitText');
                    const submitSpinner = document.getElementById('submitSpinner');
                    
                    // Disable button and show spinner
                    submitBtn.disabled = true;
                    submitText.classList.add('opacity-50');
                    submitSpinner.classList.remove('hidden');
                    
                    try {
                         const url = '<%= tour ? `/admin/tours/${tour._id}/edit` : `/admin/tours/new` %>';
                         console.log("Submitting to:", url);
                         
                         const response = await fetch(url, {
                              method: 'POST',
                              body: formData,
                              // Don't set Content-Type header, let the browser set it automatically with boundary
                              // The browser will automatically set Content-Type: multipart/form-data with boundary
                         });

                         if (!response.ok) {
                              let errorMessage = 'Network response was not ok';
                              
                              try {
                                   // Attempt to parse JSON error if available
                                   const errorData = await response.json();
                                   errorMessage = errorData.message || errorMessage;
                              } catch (parseError) {
                                   // If not JSON, try to get text error
                                   try {
                                        const textError = await response.text();
                                        // Log the raw response for debugging
                                        console.error("Server responded with:", textError.substring(0, 500) + "...");
                                        errorMessage = "Server error occurred. See console for details.";
                                   } catch (textError) {
                                        console.error("Failed to parse server response");
                                   }
                              }
                              
                              throw new Error(errorMessage);
                         }

                         const result = await response.json();
                         
                         if (result.success) {
                              window.location.href = '/admin/tours';
                         } else {
                              showFormError(result.message || 'Error saving tour');
                              // Re-enable button and hide spinner on error
                              submitBtn.disabled = false;
                              submitText.classList.remove('opacity-50');
                              submitSpinner.classList.add('hidden');
                         }
                    } catch (error) {
                         console.error('Error:', error);
                         showFormError(error.message || 'Error saving tour. Please try again.');
                         // Re-enable button and hide spinner on error
                         submitBtn.disabled = false;
                         submitText.classList.remove('opacity-50');
                         submitSpinner.classList.add('hidden');
                    }
               });

               // Add cache-busting to file inputs to ensure they reset properly
               document.addEventListener('DOMContentLoaded', function() {
                    // Add random parameter to file inputs to prevent caching issues
                    const mapInput = document.querySelector('input[name="mapImage"]');
                    const imagesInput = document.getElementById('multipleImages');
                    
                    if (mapInput) {
                         // Add a timestamp to reset the file input when the form is loaded
                         mapInput.setAttribute('data-timestamp', Date.now());
                         
                         // Monitor for any value changes in the form that might affect image uploads
                         mapInput.addEventListener('click', function() {
                              // Clear any previous selection if there was an error
                              if (this.dataset.hadError === 'true') {
                                   this.value = '';
                                   this.dataset.hadError = 'false';
                              }
                         });
                    }
                    
                    if (imagesInput) {
                         imagesInput.setAttribute('data-timestamp', Date.now());
                         
                         imagesInput.addEventListener('click', function() {
                              if (this.dataset.hadError === 'true') {
                                   this.value = '';
                                   this.dataset.hadError = 'false';
                              }
                         });
                    }
               });

               // Add function to update just the tour price
               async function updateTourPrice(tourId) {
                    try {
                         // Get the price value
                         const price = document.getElementById('price').value;
                         
                         // Validate price
                         if (!price || isNaN(parseFloat(price)) || parseFloat(price) < 0) {
                              showFormError('Please enter a valid price');
                              return;
                         }
                         
                         // Show loading state
                         const updateBtn = document.getElementById('updatePriceBtn');
                         const originalText = updateBtn.textContent;
                         updateBtn.disabled = true;
                         updateBtn.textContent = 'Updating...';
                         
                         // Send the request
                         const response = await fetch(`/admin/tours/${tourId}/update-price`, {
                              method: 'POST',
                              headers: {
                                   'Content-Type': 'application/json',
                              },
                              body: JSON.stringify({ price: parseFloat(price) })
                         });
                         
                         if (!response.ok) {
                              const errorData = await response.json();
                              throw new Error(errorData.message || 'Failed to update price');
                         }
                         
                         // Show success message
                         const successElement = document.getElementById('priceUpdateSuccess');
                         successElement.classList.remove('hidden');
                         
                         // Hide success message after 3 seconds
                         setTimeout(() => {
                              successElement.classList.add('hidden');
                         }, 3000);
                         
                         console.log('Price updated successfully');
                    } catch (error) {
                         console.error('Error updating price:', error);
                         showFormError(error.message || 'Failed to update price');
                    } finally {
                         // Restore button state
                         const updateBtn = document.getElementById('updatePriceBtn');
                         updateBtn.disabled = false;
                         updateBtn.textContent = 'Update Price';
                    }
               }
          </script>

          <%- include('../partials/admin/footer') %>