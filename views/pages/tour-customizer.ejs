<%- include('../partials/head') %>
<%- include('../partials/header') %>

<main class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
    <!-- Main Container -->
    <div class="max-w-4xl mx-auto px-4 py-8 md:py-16">
        <!-- AI Assistant Card -->
        <div class="relative bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-100 mb-8">
            <!-- Floating Neural Network Animation (Minimal AI Effect) -->
            <div class="absolute inset-0 opacity-5 pointer-events-none">
                <div class="ai-neural-bg"></div>
            </div>
            
            <!-- Pulsing Gradient Orb (AI Effect) -->
            <div class="absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-orange-500/30 to-purple-500/30 rounded-full blur-3xl animate-pulse-slow pointer-events-none"></div>
            
            <!-- Header with Progress -->
            <div class="relative z-10 p-6 md:p-8 border-b border-gray-100">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-full bg-gradient-to-br from-orange-500 to-orange-600 flex items-center justify-center text-white">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z" />
                            </svg>
                        </div>
                        <div>
                            <h1 class="font-bold text-xl text-gray-900">AI Trip Designer</h1>
                            <p class="text-sm text-gray-500">Let's craft your perfect Moroccan adventure</p>
                        </div>
                    </div>
                    
                    <!-- Progress Indicator -->
                    <div class="flex items-center space-x-1.5">
                        <div id="step-dot-1" class="w-3 h-3 rounded-full bg-orange-500"></div>
                        <div class="h-0.5 w-4 bg-gray-200" id="step-line-1"></div>
                        <div id="step-dot-2" class="w-3 h-3 rounded-full bg-gray-200"></div>
                        <div class="h-0.5 w-4 bg-gray-200" id="step-line-2"></div>
                        <div id="step-dot-3" class="w-3 h-3 rounded-full bg-gray-200"></div>
                        <div class="h-0.5 w-4 bg-gray-200" id="step-line-3"></div>
                        <div id="step-dot-4" class="w-3 h-3 rounded-full bg-gray-200"></div>
                    </div>
                </div>
                
                <!-- Current Step Label -->
                <div>
                    <h2 id="step-title" class="text-2xl font-bold text-gray-800">Choose Your Destinations</h2>
                    <p id="step-description" class="text-gray-600 text-sm mt-1">Select the cities you'd like to visit in Morocco</p>
                </div>
            </div>
            
            <!-- Main Content Area -->
            <div class="p-6 md:p-8">
                <!-- Step 1: Destinations Selection (Default visible) -->
                <div id="step-destinations" class="space-y-6">
                    <!-- Grid of Cities -->
                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                        <% const cities = [
                            { id: 'marrakech', name: 'Marrakech', image: 'https://images.unsplash.com/photo-1548784252-4dd5ed451c41?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80' },
                            { id: 'fes', name: 'Fes', image: 'https://images.unsplash.com/photo-1548019979-e5c3c08baef9?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80' },
                            { id: 'casablanca', name: 'Casablanca', image: 'https://images.unsplash.com/photo-1577147443647-81856d5151af?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80' },
                            { id: 'chefchaouen', name: 'Chefchaouen', image: 'https://images.unsplash.com/photo-1560602641-36d9b973455a?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80' },
                            { id: 'merzouga', name: 'Merzouga', image: 'https://images.unsplash.com/photo-1489493887464-892be6d1daae?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80' },
                            { id: 'essaouira', name: 'Essaouira', image: 'https://images.unsplash.com/photo-1553522911-d0e4a4ddb45a?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80' }
                        ] %>
                        
                        <% cities.forEach(city => { %>
                        <div class="city-card relative group">
                            <input type="checkbox" id="<%= city.id %>" class="hidden">
                            <label for="<%= city.id %>" class="block cursor-pointer">
                                <div class="aspect-w-1 aspect-h-1 rounded-xl overflow-hidden">
                                    <img src="<%= city.image %>" alt="<%= city.name %>" class="object-cover w-full h-full transform transition-transform group-hover:scale-110">
                                    <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-black/0"></div>
                                    
                                    <!-- City Name -->
                                    <div class="absolute bottom-0 left-0 p-3">
                                        <h3 class="text-white font-medium text-sm md:text-base"><%= city.name %></h3>
                                    </div>
                                    
                                    <!-- Selection Indicator -->
                                    <div class="absolute top-0 right-0 p-2">
                                        <div class="w-6 h-6 rounded-full border-2 border-white flex items-center justify-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white opacity-0" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <% }) %>
                    </div>
                </div>
                
                <!-- Step 2: Activities Selection (Hidden initially) -->
                <div id="step-activities" class="hidden space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <% const activities = [
                            { id: 'camel-riding', name: 'Camel Riding', icon: 'fa-horse', description: 'Experience the traditional desert transport' },
                            { id: 'cooking-class', name: 'Cooking Class', icon: 'fa-utensils', description: 'Learn to make authentic Moroccan dishes' },
                            { id: 'historical-tour', name: 'Historical Tours', icon: 'fa-landmark', description: 'Discover Morocco\'s rich heritage' },
                            { id: 'marketplace', name: 'Market Exploration', icon: 'fa-store', description: 'Navigate the vibrant souks with a local' },
                            { id: 'sandboarding', name: 'Sandboarding', icon: 'fa-mountain', description: 'Thrilling rides down Sahara dunes' },
                            { id: 'photography', name: 'Photography Tour', icon: 'fa-camera', description: 'Capture Morocco\'s most photogenic spots' }
                        ] %>
                        
                        <% activities.forEach(activity => { %>
                        <div class="activity-card">
                            <input type="checkbox" id="<%= activity.id %>" name="activities[]" value="<%= activity.id %>" class="hidden">
                            <label for="<%= activity.id %>" class="flex items-center p-4 border border-gray-200 rounded-xl cursor-pointer transition-all hover:bg-gray-50">
                                <div class="w-10 h-10 rounded-full bg-orange-100 flex items-center justify-center mr-4">
                                    <i class="fas <%= activity.icon %> text-orange-500"></i>
                                </div>
                                <div>
                                    <h3 class="font-medium text-gray-900"><%= activity.name %></h3>
                                    <p class="text-sm text-gray-500"><%= activity.description %></p>
                                </div>
                                <div class="ml-auto">
                                    <div class="w-5 h-5 rounded-full border border-gray-300 flex items-center justify-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-white opacity-0" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                                        </svg>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <% }) %>
                    </div>
                </div>
                
                <!-- Step 3: Travel Details (Hidden initially) -->
                <div id="step-details" class="hidden space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Your Name</label>
                            <input type="text" id="name" name="name" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent" placeholder="John Doe" required>
                        </div>
                        
                        <div>
                            <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                            <input type="email" id="email" name="email" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent" placeholder="you@example.com" required>
                        </div>
                        
                        <div>
                            <label for="tour-duration" class="block text-sm font-medium text-gray-700 mb-1">Tour Duration (Days)</label>
                            <select id="tour-duration" name="tour_duration" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent appearance-none bg-white">
                                <option value="3">3 Days</option>
                                <option value="5">5 Days</option>
                                <option value="7" selected>7 Days</option>
                                <option value="10">10 Days</option>
                                <option value="14">14 Days</option>
                                <option value="custom">Custom Duration</option>
                            </select>
                        </div>
                        
                        <div id="custom-duration-container" class="hidden">
                            <label for="custom-duration" class="block text-sm font-medium text-gray-700 mb-1">Specify Days</label>
                            <input type="number" id="custom-duration" name="custom_duration" min="1" max="30" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent" placeholder="Enter number of days">
                        </div>
                        
                        <div>
                            <label for="starting-city" class="block text-sm font-medium text-gray-700 mb-1">Starting City</label>
                            <select id="starting-city" name="starting_city" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent appearance-none bg-white">
                                <option value="casablanca" selected>Casablanca</option>
                                <option value="marrakech">Marrakech</option>
                                <option value="fes">Fes</option>
                                <option value="tangier">Tangier</option>
                                <option value="rabat">Rabat</option>
                            </select>
                        </div>
                        
                        <div>
                            <label for="arrival-city" class="block text-sm font-medium text-gray-700 mb-1">Arrival City</label>
                            <select id="arrival-city" name="arrival_city" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent appearance-none bg-white">
                                <option value="casablanca">Casablanca</option>
                                <option value="marrakech" selected>Marrakech</option>
                                <option value="fes">Fes</option>
                                <option value="tangier">Tangier</option>
                                <option value="rabat">Rabat</option>
                            </select>
                        </div>
                        
                        <div>
                            <label for="travel-date" class="block text-sm font-medium text-gray-700 mb-1">Travel Date</label>
                            <input type="date" id="travel-date" name="travel_date" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent" required>
                        </div>
                        
                        <div>
                            <label for="travelers" class="block text-sm font-medium text-gray-700 mb-1">Number of Travelers</label>
                            <select id="travelers" name="travelers" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent appearance-none bg-white">
                                <option value="1">1 Person</option>
                                <option value="2" selected>2 People</option>
                                <option value="3">3 People</option>
                                <option value="4">4 People</option>
                                <option value="5+">5+ People</option>
                            </select>
                        </div>
                        
                        <div class="col-span-1 md:col-span-2">
                            <label for="additional-info" class="block text-sm font-medium text-gray-700 mb-1">Additional Information</label>
                            <textarea id="additional-info" name="additional_info" rows="4" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent" placeholder="Tell us more about your preferences, special needs, or anything else that would help us create your perfect trip."></textarea>
                        </div>
                    </div>
                </div>
                
                <!-- AI Processing Animation (Hidden initially) -->
                <div id="ai-processing" class="hidden py-10 text-center">
                    <!-- Minimal AI Processing Animation -->
                    <div class="relative mx-auto w-24 h-24 mb-6">
                        <!-- Outer Circle -->
                        <div class="absolute inset-0 rounded-full border-4 border-gray-200"></div>
                        
                        <!-- Spinning Circle -->
                        <div class="absolute inset-0 rounded-full border-4 border-transparent border-t-orange-500 animate-spin"></div>
                        
                        <!-- AI Icon -->
                        <div class="absolute inset-0 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-orange-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                            </svg>
                        </div>
                    </div>
                    
                    <h3 class="text-lg font-bold text-gray-800 mb-2">AI is designing your trip</h3>
                    
                    <!-- Dynamic Processing Message -->
                    <p id="ai-processing-message" class="text-gray-600 text-sm"></p>
                    
                    <!-- AI Keywords -->
                    <div class="max-w-xs mx-auto mt-4 flex flex-wrap justify-center gap-2">
                        <span class="inline-block bg-orange-100 text-orange-600 text-xs px-2 py-1 rounded-full animate-pulse">Analyzing preferences</span>
                        <span class="inline-block bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded-full">Optimizing route</span>
                        <span class="inline-block bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded-full">Personalizing</span>
                    </div>
                </div>
                
                <!-- Step 4: Final Itinerary (Hidden initially) -->
                <div id="step-finalize" class="hidden space-y-6">
                    <!-- AI Generated Title -->
                    <div class="text-center mb-6">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.414L8 12.586l7.293-7.293a1 1 0 011.12-.38z" clip-rule="evenodd" />
                            </svg>
                            AI Recommended
                        </span>
                        <h3 id="ai-title" class="text-xl font-bold text-gray-900 mt-2">Your Personalized Moroccan Journey</h3>
                    </div>
                    
                    <!-- Edit/Save buttons -->
                    <div id="itinerary-actions" class="flex justify-end space-x-4 mb-4">
                        <button id="edit-btn" class="px-4 py-2 flex items-center text-sm font-medium text-orange-500 bg-white border border-orange-300 rounded-lg hover:bg-orange-50 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                            </svg>
                            Edit Itinerary
                        </button>
                        <button id="save-btn" class="hidden px-4 py-2 flex items-center text-sm font-medium text-white bg-orange-500 rounded-lg hover:bg-orange-600 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                            </svg>
                            Save Changes
                        </button>
                    </div>
                    
                    <!-- Status Message -->
                    <div id="status-message" class="hidden rounded-lg p-4 mb-4 text-sm"></div>
                    
                    <!-- Itinerary Summary -->
                    <div id="itinerary-summary" class="bg-gradient-to-r from-orange-50 to-amber-50 p-5 rounded-xl border border-orange-100 mb-6">
                        <h4 class="font-medium text-orange-800 mb-2">Trip Overview</h4>
                        <div id="summary-content" class="text-sm text-orange-700">
                            <!-- Will be filled dynamically -->
                        </div>
                    </div>
                    
                    <!-- Trip Summary Cards -->
                    <div class="space-y-4">
                        <!-- Day Cards will be dynamically generated here -->
                        <div id="itinerary-container"></div>
                    </div>
                    
                    <!-- Booking Form -->
                    <div class="mt-8 bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
                        <h4 class="text-lg font-bold text-gray-900 mb-4">Confirm Your Booking</h4>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Your Name</label>
                                <p id="confirm-name" class="px-3 py-2 bg-gray-50 rounded-md text-gray-800"></p>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                                <p id="confirm-email" class="px-3 py-2 bg-gray-50 rounded-md text-gray-800"></p>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Travel Date</label>
                                <p id="confirm-date" class="px-3 py-2 bg-gray-50 rounded-md text-gray-800"></p>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Number of Travelers</label>
                                <p id="confirm-travelers" class="px-3 py-2 bg-gray-50 rounded-md text-gray-800"></p>
                            </div>
                        </div>
                        
                        <div class="flex items-center mb-6">
                            <input type="checkbox" id="terms-agreement" class="h-4 w-4 text-orange-500 border-gray-300 rounded">
                            <label for="terms-agreement" class="ml-2 block text-sm text-gray-700">
                                I agree to the <a href="/terms" class="text-orange-600 hover:text-orange-800">Terms and Conditions</a>
                            </label>
                        </div>
                        
                        <button id="book-trip-btn" disabled class="w-full bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white font-medium py-3 px-4 rounded-lg shadow-sm flex items-center justify-center opacity-70 cursor-not-allowed">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
                            </svg>
                            Book My Morocco Adventure
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Footer with Navigation -->
            <div class="border-t border-gray-100 p-4 md:p-6 flex items-center justify-between">
                <button id="prev-btn" class="hidden px-4 py-2 text-sm font-medium text-gray-600 hover:text-gray-900">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 inline" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                    </svg>
                    Back
                </button>
                
                <button id="next-btn" class="ml-auto px-5 py-2.5 bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white font-medium rounded-full shadow-sm flex items-center">
                    Next
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
                
                <button id="submit-btn" class="hidden ml-auto px-5 py-2.5 bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white font-medium rounded-full shadow-sm flex items-center">
                    Book My Trip
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
        </div>
        
        <!-- Testimonial (Optional - Small social proof element) -->
        <div class="bg-white rounded-xl p-4 shadow-md border border-gray-100 flex items-center space-x-4">
            <div class="flex-shrink-0">
                <div class="w-12 h-12 rounded-full bg-gradient-to-br from-orange-400 to-orange-500 flex items-center justify-center text-white font-bold text-lg">
                    JM
                </div>
            </div>
            <div class="flex-1 min-w-0">
                <p class="text-sm text-gray-600 italic">
                    "The AI customizer designed the perfect trip for us. We saw all the best spots without feeling rushed."
                </p>
                <p class="text-xs text-gray-400 mt-1">
                    <span class="font-medium">Jessica M.</span> • Traveled April 2023
                </p>
            </div>
            <div class="flex-shrink-0">
                <div class="flex -space-x-1">
                    <span class="flex h-5 w-5 items-center justify-center rounded-full bg-orange-500 text-white text-xs">★</span>
                    <span class="flex h-5 w-5 items-center justify-center rounded-full bg-orange-500 text-white text-xs">★</span>
                    <span class="flex h-5 w-5 items-center justify-center rounded-full bg-orange-500 text-white text-xs">★</span>
                    <span class="flex h-5 w-5 items-center justify-center rounded-full bg-orange-500 text-white text-xs">★</span>
                    <span class="flex h-5 w-5 items-center justify-center rounded-full bg-orange-500 text-white text-xs">★</span>
                </div>
            </div>
        </div>
    </div>
</main>

<!-- Add CSS for Neural Network Background (AI Effect) -->
<style>
    .ai-neural-bg {
        background-image: radial-gradient(circle, rgba(255,125,0,0.1) 1px, transparent 1px);
        background-size: 30px 30px;
        width: 100%;
        height: 100%;
    }
    
    .animate-pulse-slow {
        animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
    
    @keyframes pulse {
        0%, 100% {
            opacity: 0.2;
        }
        50% {
            opacity: 0.4;
        }
    }
    
    /* Fix for city card checkboxes */
    .city-card input:checked + label .w-6.h-6 {
        background-color: rgb(249, 115, 22);
        border-color: rgb(249, 115, 22);
    }
    
    .city-card input:checked + label .opacity-0 {
        opacity: 1;
    }
    
    /* Fix for activity card checkboxes */
    .activity-card input:checked + label {
        border-color: rgb(249, 115, 22);
        background-color: rgb(255, 247, 237);
    }
    
    .activity-card input:checked + label .w-5.h-5 {
        background-color: rgb(249, 115, 22);
        border-color: rgb(249, 115, 22);
    }
    
    .activity-card input:checked + label .opacity-0 {
        opacity: 1;
    }
    
    /* Editable content styling */
    [contenteditable="true"] {
        min-height: 1.5em;
        transition: all 0.2s ease;
    }
    
    [contenteditable="true"]:hover {
        background-color: rgba(249, 115, 22, 0.05);
    }
    
    [contenteditable="true"]:focus {
        outline: none;
        background-color: #fff;
        box-shadow: 0 0 0 2px rgba(249, 115, 22, 0.3);
    }
    
    /* Fade-in animation for status message */
    #status-message {
        animation: fadeIn 0.3s ease-in-out;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    /* Progress steps animation */
    .step-active {
        transition: all 0.3s ease;
    }
    
    /* Day card hover effect */
    #itinerary-container > div {
        transition: all 0.2s ease;
    }
    
    #itinerary-container > div:hover {
        transform: translateY(-2px);
    }
</style>

<!-- JavaScript for Multi-step Form -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Elements
        const stepDots = [
            document.getElementById('step-dot-1'),
            document.getElementById('step-dot-2'),
            document.getElementById('step-dot-3'),
            document.getElementById('step-dot-4')
        ];
        
        const stepLines = [
            document.getElementById('step-line-1'),
            document.getElementById('step-line-2'),
            document.getElementById('step-line-3')
        ];
        
        const stepTitle = document.getElementById('step-title');
        const stepDescription = document.getElementById('step-description');
        
        const steps = [
            document.getElementById('step-destinations'),
            document.getElementById('step-activities'),
            document.getElementById('step-details'),
            document.getElementById('step-finalize')
        ];
        
        const aiProcessing = document.getElementById('ai-processing');
        const processingMessages = [
            "Analyzing your destination preferences...",
            "Matching activities to your chosen locations...",
            "Calculating optimal routes between cities...",
            "Personalizing recommendations based on travel patterns...",
            "Finalizing your custom Moroccan adventure..."
        ];
        
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const submitBtn = document.getElementById('submit-btn');
        
        // Current step tracking
        let currentStep = 0;
        
        // Step titles and descriptions
        const stepTitles = [
            "Choose Your Destinations",
            "Select Your Activities",
            "Travel Details",
            "Your Personalized Journey"
        ];
        
        const stepDescriptions = [
            "Select the cities you'd like to visit in Morocco",
            "Pick experiences that interest you the most",
            "Tell us about yourself and your travel plans",
            "Review your AI-designed Morocco adventure"
        ];
        
        // Update UI for current step
        function updateStep() {
            // Hide all steps
            steps.forEach(step => step.classList.add('hidden'));
            
            // Show current step
            if (currentStep < steps.length) {
                steps[currentStep].classList.remove('hidden');
            }
            
            // Update dots
            stepDots.forEach((dot, index) => {
                if (index < currentStep) {
                    dot.classList.remove('bg-gray-200');
                    dot.classList.add('bg-orange-500');
                } else if (index === currentStep) {
                    dot.classList.remove('bg-gray-200');
                    dot.classList.add('bg-orange-500');
                } else {
                    dot.classList.remove('bg-orange-500');
                    dot.classList.add('bg-gray-200');
                }
            });
            
            // Update lines
            stepLines.forEach((line, index) => {
                if (index < currentStep) {
                    line.classList.remove('bg-gray-200');
                    line.classList.add('bg-orange-500');
                } else {
                    line.classList.remove('bg-orange-500');
                    line.classList.add('bg-gray-200');
                }
            });
            
            // Update title and description
            stepTitle.textContent = stepTitles[currentStep];
            stepDescription.textContent = stepDescriptions[currentStep];
            
            // Update buttons
            if (currentStep === 0) {
                prevBtn.classList.add('hidden');
            } else {
                prevBtn.classList.remove('hidden');
            }
            
            if (currentStep === steps.length - 1) {
                nextBtn.classList.add('hidden');
                submitBtn.classList.remove('hidden');
            } else {
                nextBtn.classList.remove('hidden');
                submitBtn.classList.add('hidden');
            }
        }
        
        // Show AI processing animation
        function showProcessing() {
            // Hide all steps
            steps.forEach(step => step.classList.add('hidden'));
            
            // Show processing
            aiProcessing.classList.remove('hidden');
            
            // Animate through messages
            let messageIndex = 0;
            const processingMessageElement = document.getElementById('ai-processing-message');
            
            processingMessageElement.textContent = processingMessages[0];
            
            const messageInterval = setInterval(() => {
                messageIndex = (messageIndex + 1) % processingMessages.length;
                processingMessageElement.textContent = processingMessages[messageIndex];
                
                // If we've gone through all messages, stop and move to next step
                if (messageIndex === processingMessages.length - 1) {
                    clearInterval(messageInterval);
                    setTimeout(() => {
                        aiProcessing.classList.add('hidden');
                        generateItinerary();
                        updateStep();
                    }, 1500);
                }
            }, 1500);
        }
        
        // Generate sample itinerary
        function generateItinerary() {
            const container = document.getElementById('itinerary-container');
            const aiTitle = document.getElementById('ai-title');
            const summaryContent = document.getElementById('summary-content');
            
            // Show loading state
            container.innerHTML = '<div class="text-center py-10"><div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div><p class="mt-3 text-gray-600">Generating your itinerary...</p></div>';
            
            // Get selected destinations
            const selectedDestinations = [];
            document.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
                if (['marrakech', 'fes', 'casablanca', 'chefchaouen', 'merzouga', 'essaouira'].includes(checkbox.id)) {
                    selectedDestinations.push({
                        id: checkbox.id,
                        name: checkbox.id.charAt(0).toUpperCase() + checkbox.id.slice(1)
                    });
                }
            });
            
            // If no destinations selected, use default
            if (selectedDestinations.length === 0) {
                selectedDestinations.push(
                    { id: 'marrakech', name: 'Marrakech' },
                    { id: 'merzouga', name: 'Merzouga' }
                );
            }
            
            // Get selected activities
            const selectedActivities = [];
            document.querySelectorAll('input[name="activities[]"]:checked').forEach(checkbox => {
                selectedActivities.push(checkbox.id.replace(/-/g, ' '));
            });
            
            // Get user details
            const name = document.getElementById('name').value || '';
            const email = document.getElementById('email').value || '';
            const travelDate = document.getElementById('travel-date').value || '';
            const travelers = document.getElementById('travelers').value || '2';
            const additionalInfo = document.getElementById('additional-info').value || '';
            
            // Fill in confirmation details
            document.getElementById('confirm-name').textContent = name;
            document.getElementById('confirm-email').textContent = email;
            document.getElementById('confirm-date').textContent = travelDate || 'To be determined';
            document.getElementById('confirm-travelers').textContent = travelers;
            
            // Get tour duration
            let tourDuration = document.getElementById('tour-duration').value;
            if (tourDuration === 'custom') {
                tourDuration = document.getElementById('custom-duration').value;
            }
            
            // Get starting and arrival cities
            const startingCity = document.getElementById('starting-city').value;
            const arrivalCity = document.getElementById('arrival-city').value;
            
            // Call the DeepSeek API endpoint
            fetch('/api/generate-itinerary', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    destinations: selectedDestinations.map(dest => dest.name),
                    activities: selectedActivities,
                    travelers: travelers,
                    travelDate: travelDate,
                    additionalInfo: additionalInfo,
                    tourDuration: tourDuration,
                    startingCity: startingCity,
                    arrivalCity: arrivalCity,
                    email: email,
                    name: name
                }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.itinerary) {
                    const itinerary = data.itinerary;
                    
                    // Store the original itinerary data for editing and booking
                    window.itineraryData = itinerary;
                    
                    // Update title and summary
                    aiTitle.textContent = itinerary.title || 'Your Personalized Moroccan Journey';
                    summaryContent.innerHTML = itinerary.summary || 'A customized tour designed especially for you.';
                    
                    // Generate day cards
                    let html = '';
                    
                    // Add each day
                    itinerary.days.forEach((day) => {
                        html += `
                        <div class="bg-white p-5 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-shadow mb-4" data-day="${day.day}">
                            <div class="flex items-center mb-3">
                                <span class="w-8 h-8 rounded-full bg-orange-100 text-orange-600 text-sm flex items-center justify-center font-medium mr-3">
                                    ${day.day}
                                </span>
                                <h4 class="font-bold text-lg text-gray-800" data-field="location" contenteditable="false">Day ${day.day} - ${day.location}</h4>
                            </div>
                            
                            <div class="p-3 bg-gray-50 rounded-lg mb-4">
                                <p class="text-sm text-gray-700" data-field="description" contenteditable="false">${day.description}</p>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <h5 class="text-xs font-bold text-gray-500 uppercase mb-2 flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1 text-orange-500" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M6 3a1 1 0 011-1h.01a1 1 0 010 2H7a1 1 0 01-1-1zm2 3a1 1 0 00-2 0v1a2 2 0 00-2 2v1a2 2 0 00-2 2v.683a3.7 3.7 0 011.055.485 1.704 1.704 0 001.89 0 3.704 3.704 0 014.11 0 1.704 1.704 0 001.89 0 3.704 3.704 0 014.11 0 1.704 1.704 0 001.89 0A3.7 3.7 0 0118 12.683V12a2 2 0 00-2-2V9a2 2 0 00-2-2V6a1 1 0 10-2 0v1h-1V6a1 1 0 10-2 0v1H8V6zm10 8.868a3.704 3.704 0 01-4.055-.036 1.704 1.704 0 00-1.89 0 3.704 3.704 0 01-4.11 0 1.704 1.704 0 00-1.89 0A3.704 3.704 0 012 14.868V17a1 1 0 001 1h14a1 1 0 001-1v-2.132zM9 3a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1zm3 0a1 1 0 011-1h.01a1 1 0 110 2H13a1 1 0 01-1-1z" clip-rule="evenodd" />
                                        </svg>
                                        Activities
                                    </h5>
                                    <div class="activities-container" data-field="activities">
                                        ${day.activities.map(activity => 
                                            `<div class="flex items-center p-2 mb-1 bg-white rounded border border-gray-100">
                                                <span class="w-1.5 h-1.5 bg-orange-400 rounded-full mr-2"></span>
                                                <span class="text-xs text-gray-700" contenteditable="false">${activity}</span>
                                            </div>`
                                        ).join('')}
                                    </div>
                                </div>
                                
                                <div>
                                    <h5 class="text-xs font-bold text-gray-500 uppercase mb-2 flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1 text-orange-500" viewBox="0 0 20 20" fill="currentColor">
                                            <path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z" />
                                        </svg>
                                        Meals
                                    </h5>
                                    <div class="p-3 bg-white rounded border border-gray-100">
                                        <p class="text-xs text-gray-600" data-field="meals">
                                            <span class="font-medium">Breakfast:</span> <span contenteditable="false">${day.meals?.breakfast || 'Local breakfast at accommodation'}</span><br>
                                            <span class="font-medium">Lunch:</span> <span contenteditable="false">${day.meals?.lunch || 'Local restaurant'}</span><br>
                                            <span class="font-medium">Dinner:</span> <span contenteditable="false">${day.meals?.dinner || 'Restaurant near accommodation'}</span>
                                        </p>
                                    </div>
                                    
                                    <h5 class="text-xs font-bold text-gray-500 uppercase mt-3 mb-2 flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1 text-orange-500" viewBox="0 0 20 20" fill="currentColor">
                                            <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
                                        </svg>
                                        Accommodation
                                    </h5>
                                    <div class="p-3 bg-white rounded border border-gray-100">
                                        <p class="text-xs text-gray-600" data-field="accommodation" contenteditable="false">${day.accommodation || 'Selected hotel or riad in ' + day.location}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        `;
                    });
                    
                    container.innerHTML = html;
                } else {
                    // Fallback to basic itinerary if API call fails
                    fallbackItinerary(selectedDestinations);
                    
                    // Show error message
                    showStatusMessage('We could not generate a detailed itinerary at this time. Here\'s a basic outline for your trip.', 'error');
                }
                
                // Enable booking button when terms are agreed
                const termsCheckbox = document.getElementById('terms-agreement');
                const bookTripBtn = document.getElementById('book-trip-btn');
                
                termsCheckbox.addEventListener('change', function() {
                    if (this.checked) {
                        bookTripBtn.disabled = false;
                        bookTripBtn.classList.remove('opacity-70', 'cursor-not-allowed');
                    } else {
                        bookTripBtn.disabled = true;
                        bookTripBtn.classList.add('opacity-70', 'cursor-not-allowed');
                    }
                });
                
                // Set up editing functionality
                setupEditingFunctionality();
            })
            .catch(error => {
                console.error('Error:', error);
                // Fallback to basic itinerary
                fallbackItinerary(selectedDestinations);
                
                // Show error message
                showStatusMessage('There was an error connecting to our service. Here\'s a basic outline for your trip.', 'error');
            });
        }
        
        // Set up editing functionality
        function setupEditingFunctionality() {
            const editBtn = document.getElementById('edit-btn');
            const saveBtn = document.getElementById('save-btn');
            
            // Remove any previously attached listeners
            const newEditBtn = editBtn.cloneNode(true);
            const newSaveBtn = saveBtn.cloneNode(true);
            editBtn.parentNode.replaceChild(newEditBtn, editBtn);
            saveBtn.parentNode.replaceChild(newSaveBtn, saveBtn);
            
            // Add new event listeners
            newEditBtn.addEventListener('click', function() {
                makeItineraryEditable(true);
                this.classList.add('hidden');
                document.getElementById('save-btn').classList.remove('hidden');
                showStatusMessage('You\'re now in edit mode. Click on any section to modify it.', 'info');
            });
            
            newSaveBtn.addEventListener('click', function() {
                const updatedItinerary = collectEditedItinerary();
                window.itineraryData = updatedItinerary;
                
                makeItineraryEditable(false);
                this.classList.add('hidden');
                document.getElementById('edit-btn').classList.remove('hidden');
                showStatusMessage('Your changes have been saved!', 'success');
            });
            
            // Book trip button
            document.getElementById('book-trip-btn').addEventListener('click', function() {
                bookTrip();
            });
        }
        
        // Make itinerary editable
        function makeItineraryEditable(editable) {
            const dayCards = document.querySelectorAll('#itinerary-container > div');
            
            dayCards.forEach(card => {
                // Toggle styling for edit mode
                if (editable) {
                    card.classList.add('border-orange-300');
                    card.classList.add('bg-orange-50');
                } else {
                    card.classList.remove('border-orange-300');
                    card.classList.remove('bg-orange-50');
                }
                
                // Make content editable
                card.querySelectorAll('[contenteditable]').forEach(element => {
                    element.setAttribute('contenteditable', editable.toString());
                    
                    if (editable) {
                        element.classList.add('border-dashed', 'border-orange-300', 'border', 'bg-white', 'hover:bg-orange-50', 'rounded', 'px-2', 'focus:outline-none', 'focus:ring-2', 'focus:ring-orange-300');
                    } else {
                        element.classList.remove('border-dashed', 'border-orange-300', 'border', 'bg-white', 'hover:bg-orange-50', 'rounded', 'px-2', 'focus:outline-none', 'focus:ring-2', 'focus:ring-orange-300');
                    }
                });
                
                // Make activities editable
                const activitiesContainer = card.querySelector('.activities-container');
                if (activitiesContainer && editable) {
                    // Add "Add Activity" button when in edit mode
                    const addActivityBtn = document.createElement('button');
                    addActivityBtn.className = 'text-xs text-orange-500 font-medium flex items-center mt-2 hover:text-orange-600 add-activity-btn';
                    addActivityBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" /></svg> Add Activity';
                    addActivityBtn.onclick = function() {
                        const newActivity = document.createElement('div');
                        newActivity.className = 'flex items-center p-2 mb-1 bg-white rounded border border-gray-100';
                        newActivity.innerHTML = `
                            <span class="w-1.5 h-1.5 bg-orange-400 rounded-full mr-2"></span>
                            <span class="text-xs text-gray-700" contenteditable="true">New activity</span>
                            <button class="ml-auto text-gray-400 hover:text-red-500 delete-activity">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        `;
                        
                        activitiesContainer.appendChild(newActivity);
                        
                        // Add delete functionality to the new activity
                        newActivity.querySelector('.delete-activity').onclick = function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            newActivity.remove();
                        };
                    };
                    
                    activitiesContainer.appendChild(addActivityBtn);
                    
                    // Add delete buttons to existing activities
                    activitiesContainer.querySelectorAll('div').forEach(activity => {
                        if (!activity.querySelector('.delete-activity')) {
                            const deleteBtn = document.createElement('button');
                            deleteBtn.className = 'ml-auto text-gray-400 hover:text-red-500 delete-activity';
                            deleteBtn.innerHTML = `
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                </svg>
                            `;
                            
                            deleteBtn.onclick = function(e) {
                                e.preventDefault();
                                e.stopPropagation();
                                activity.remove();
                            };
                            
                            activity.appendChild(deleteBtn);
                        }
                    });
                } else if (activitiesContainer) {
                    // Remove edit buttons when not in edit mode
                    activitiesContainer.querySelectorAll('.add-activity-btn').forEach(btn => btn.remove());
                    activitiesContainer.querySelectorAll('.delete-activity').forEach(btn => btn.remove());
                }
            });
            
            // Make summary editable
            const summaryContent = document.getElementById('summary-content');
            summaryContent.setAttribute('contenteditable', editable.toString());
            
            if (editable) {
                summaryContent.classList.add('border-dashed', 'border-orange-300', 'border', 'bg-white', 'rounded', 'p-2');
            } else {
                summaryContent.classList.remove('border-dashed', 'border-orange-300', 'border', 'bg-white', 'rounded', 'p-2');
            }
        }
        
        // Collect edited itinerary data
        function collectEditedItinerary() {
            const itinerary = {...window.itineraryData};
            
            // Update summary
            itinerary.summary = document.getElementById('summary-content').textContent;
            
            // Update days
            const dayCards = document.querySelectorAll('#itinerary-container > div');
            dayCards.forEach(card => {
                const dayIndex = parseInt(card.getAttribute('data-day')) - 1;
                
                if (dayIndex >= 0 && dayIndex < itinerary.days.length) {
                    const day = itinerary.days[dayIndex];
                    
                    // Get location from title (Day X - Location)
                    const titleParts = card.querySelector('[data-field="location"]').textContent.split(' - ');
                    if (titleParts.length > 1) {
                        day.location = titleParts[1];
                    }
                    
                    // Get description
                    day.description = card.querySelector('[data-field="description"]').textContent;
                    
                    // Get activities
                    day.activities = [];
                    card.querySelectorAll('.activities-container > div').forEach(activity => {
                        const activityText = activity.querySelector('span:nth-child(2)').textContent;
                        if (activityText) {
                            day.activities.push(activityText);
                        }
                    });
                    
                    // Get meals
                    const mealsElement = card.querySelector('[data-field="meals"]');
                    const breakfastElement = mealsElement.querySelector('span:nth-child(2)');
                    const lunchElement = mealsElement.querySelector('span:nth-child(4)');
                    const dinnerElement = mealsElement.querySelector('span:nth-child(6)');
                    
                    day.meals = {
                        breakfast: breakfastElement ? breakfastElement.textContent : '',
                        lunch: lunchElement ? lunchElement.textContent : '',
                        dinner: dinnerElement ? dinnerElement.textContent : ''
                    };
                    
                    // Get accommodation
                    day.accommodation = card.querySelector('[data-field="accommodation"]').textContent;
                }
            });
            
            return itinerary;
        }
        
        // Book the trip via AJAX
        function bookTrip() {
            const bookBtn = document.getElementById('book-trip-btn');
            const statusMessage = document.getElementById('status-message');
            
            // Get user info
            const name = document.getElementById('name').value;
            const email = document.getElementById('email').value;
            const travelDate = document.getElementById('travel-date').value;
            const travelers = document.getElementById('travelers').value;
            
            // Disable button and show loading state
            bookBtn.disabled = true;
            bookBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Processing...';
            
            // Send data to server to save
            fetch('/api/save-itinerary', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name,
                    email,
                    travelers,
                    travelDate,
                    itinerary: window.itineraryData
                }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success UI
                    showStatusMessage('Your booking has been confirmed! Our team will contact you within 24 hours.', 'success');
                    
                    // Update button
                    bookBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" /></svg> Booking Confirmed!';
                    bookBtn.classList.remove('from-orange-500', 'to-orange-600', 'hover:from-orange-600', 'hover:to-orange-700');
                    bookBtn.classList.add('from-green-500', 'to-green-600');
                    
                    // Disable edit button
                    document.getElementById('edit-btn').classList.add('hidden');
                    
                    // Show booking confirmation
                    setTimeout(() => {
                        const bookingConfirmation = document.createElement('div');
                        bookingConfirmation.className = 'mt-6 p-6 bg-green-50 border border-green-200 rounded-xl text-center';
                        bookingConfirmation.innerHTML = `
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-green-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <h3 class="text-xl font-bold text-green-800 mb-2">Booking Confirmed!</h3>
                            <p class="text-green-700 mb-4">Booking reference: ${data.bookingId}</p>
                            <p class="text-sm text-green-600">We've sent a confirmation email to ${email}.<br>Our team will contact you shortly to finalize the details of your Moroccan adventure.</p>
                        `;
                        
                        const bookingForm = document.querySelector('.booking-form');
                        bookingForm.parentNode.appendChild(bookingConfirmation);
                    }, 1000);
                    
                } else {
                    // Show error
                    showStatusMessage('There was an error processing your booking. Please try again.', 'error');
                    
                    // Reset button
                    bookBtn.disabled = false;
                    bookBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" /></svg> Book My Morocco Adventure';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                
                // Show error
                showStatusMessage('There was an error connecting to our service. Please try again later.', 'error');
                
                // Reset button
                bookBtn.disabled = false;
                bookBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" /></svg> Book My Morocco Adventure';
            });
        }
        
        // Show status message
        function showStatusMessage(message, type) {
            const statusMessage = document.getElementById('status-message');
            statusMessage.innerHTML = message;
            statusMessage.classList.remove('hidden', 'bg-green-50', 'text-green-800', 'border-green-200', 'bg-orange-50', 'text-orange-800', 'border-orange-200', 'bg-red-50', 'text-red-800', 'border-red-200');
            
            if (type === 'success') {
                statusMessage.classList.add('bg-green-50', 'text-green-800', 'border', 'border-green-200');
            } else if (type === 'info') {
                statusMessage.classList.add('bg-orange-50', 'text-orange-800', 'border', 'border-orange-200');
            } else if (type === 'error') {
                statusMessage.classList.add('bg-red-50', 'text-red-800', 'border', 'border-red-200');
            }
            
            statusMessage.classList.remove('hidden');
            
            // Hide after 5 seconds
            setTimeout(() => {
                statusMessage.classList.add('hidden');
            }, 5000);
        }
        
        // Fallback itinerary generator
        function fallbackItinerary(selectedDestinations) {
            const container = document.getElementById('itinerary-container');
            const summaryContent = document.getElementById('summary-content');
            let html = '';
            
            // Create a basic itinerary based on selected destinations
            summaryContent.innerHTML = `A ${selectedDestinations.length}-day journey through Morocco, visiting ${selectedDestinations.map(d => d.name).join(', ')}.`;
            
            // Create simple itinerary object for booking
            window.itineraryData = {
                title: "Your Morocco Journey",
                summary: summaryContent.innerHTML,
                days: []
            };
            
            selectedDestinations.forEach((destination, index) => {
                // Create a day object for the itinerary data
                const dayObj = {
                    day: index + 1,
                    location: destination.name,
                    description: `Explore the vibrant ${destination.name} with its colorful markets, historic sites, and authentic cuisine.`,
                    activities: ["Morning Tour", "Local Cuisine", "Cultural Visit"],
                    meals: {
                        breakfast: "Breakfast at your hotel",
                        lunch: "Local restaurant in " + destination.name,
                        dinner: "Traditional Moroccan dinner"
                    },
                    accommodation: "Hotel in " + destination.name
                };
                
                // Add to itinerary data
                window.itineraryData.days.push(dayObj);
                
                // Create HTML
                html += `
                <div class="bg-white p-5 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-shadow mb-4" data-day="${index + 1}">
                    <div class="flex items-center mb-3">
                        <span class="w-8 h-8 rounded-full bg-orange-100 text-orange-600 text-sm flex items-center justify-center font-medium mr-3">
                            ${index + 1}
                        </span>
                        <h4 class="font-bold text-lg text-gray-800" data-field="location" contenteditable="false">Day ${index + 1} - ${destination.name}</h4>
                    </div>
                    
                    <div class="p-3 bg-gray-50 rounded-lg mb-4">
                        <p class="text-sm text-gray-700" data-field="description" contenteditable="false">Explore the vibrant ${destination.name} with its colorful markets, historic sites, and authentic cuisine.</p>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <h5 class="text-xs font-bold text-gray-500 uppercase mb-2 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1 text-orange-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M6 3a1 1 0 011-1h.01a1 1 0 010 2H7a1 1 0 01-1-1zm2 3a1 1 0 00-2 0v1a2 2 0 00-2 2v1a2 2 0 00-2 2v.683a3.7 3.7 0 011.055.485 1.704 1.704 0 001.89 0 3.704 3.704 0 014.11 0 1.704 1.704 0 001.89 0 3.704 3.704 0 014.11 0 1.704 1.704 0 001.89 0A3.7 3.7 0 0118 12.683V12a2 2 0 00-2-2V9a2 2 0 00-2-2V6a1 1 0 10-2 0v1h-1V6a1 1 0 10-2 0v1H8V6zm10 8.868a3.704 3.704 0 01-4.055-.036 1.704 1.704 0 00-1.89 0 3.704 3.704 0 01-4.11 0 1.704 1.704 0 00-1.89 0A3.704 3.704 0 012 14.868V17a1 1 0 001 1h14a1 1 0 001-1v-2.132zM9 3a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1zm3 0a1 1 0 011-1h.01a1 1 0 110 2H13a1 1 0 01-1-1z" clip-rule="evenodd" />
                                </svg>
                                Activities
                            </h5>
                            <div class="activities-container" data-field="activities">
                                <div class="flex items-center p-2 mb-1 bg-white rounded border border-gray-100">
                                    <span class="w-1.5 h-1.5 bg-orange-400 rounded-full mr-2"></span>
                                    <span class="text-xs text-gray-700" contenteditable="false">Morning Tour</span>
                                </div>
                                <div class="flex items-center p-2 mb-1 bg-white rounded border border-gray-100">
                                    <span class="w-1.5 h-1.5 bg-orange-400 rounded-full mr-2"></span>
                                    <span class="text-xs text-gray-700" contenteditable="false">Local Cuisine</span>
                                </div>
                                <div class="flex items-center p-2 mb-1 bg-white rounded border border-gray-100">
                                    <span class="w-1.5 h-1.5 bg-orange-400 rounded-full mr-2"></span>
                                    <span class="text-xs text-gray-700" contenteditable="false">Cultural Visit</span>
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <h5 class="text-xs font-bold text-gray-500 uppercase mb-2 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1 text-orange-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z" />
                                </svg>
                                Meals
                            </h5>
                            <div class="p-3 bg-white rounded border border-gray-100">
                                <p class="text-xs text-gray-600" data-field="meals">
                                    <span class="font-medium">Breakfast:</span> <span contenteditable="false">Breakfast at your hotel</span><br>
                                    <span class="font-medium">Lunch:</span> <span contenteditable="false">Local restaurant in ${destination.name}</span><br>
                                    <span class="font-medium">Dinner:</span> <span contenteditable="false">Traditional Moroccan dinner</span>
                                </p>
                            </div>
                            
                            <h5 class="text-xs font-bold text-gray-500 uppercase mt-3 mb-2 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1 text-orange-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
                                </svg>
                                Accommodation
                            </h5>
                            <div class="p-3 bg-white rounded border border-gray-100">
                                <p class="text-xs text-gray-600" data-field="accommodation" contenteditable="false">Hotel in ${destination.name}</p>
                            </div>
                        </div>
                    </div>
                </div>
                `;
            });
            
            container.innerHTML = html;
        }
        
        // Event Listeners
        nextBtn.addEventListener('click', function() {
            if (currentStep < steps.length - 1) {
                currentStep++;
                
                // If going to final step, show processing first
                if (currentStep === steps.length - 1) {
                    showProcessing();
                } else {
                    updateStep();
                }
            }
        });
        
        prevBtn.addEventListener('click', function() {
            if (currentStep > 0) {
                currentStep--;
                updateStep();
            }
        });
        
        submitBtn.addEventListener('click', function() {
            const termsAgreed = document.getElementById('terms-agreement').checked;
            
            if (!termsAgreed) {
                showStatusMessage('Please agree to the terms and conditions to continue.', 'error');
                return;
            }
            
            bookTrip();
        });
        
        // Initialize
        updateStep();
        
        // Add custom duration toggle event listener
        document.getElementById('tour-duration').addEventListener('change', function() {
            const customDurationContainer = document.getElementById('custom-duration-container');
            if (this.value === 'custom') {
                customDurationContainer.classList.remove('hidden');
            } else {
                customDurationContainer.classList.add('hidden');
            }
        });
        
        // Terms agreement checkbox for booking button
        document.getElementById('terms-agreement')?.addEventListener('change', function() {
            const bookTripBtn = document.getElementById('book-trip-btn');
            if (this.checked) {
                bookTripBtn.disabled = false;
                bookTripBtn.classList.remove('opacity-70', 'cursor-not-allowed');
            } else {
                bookTripBtn.disabled = true;
                bookTripBtn.classList.add('opacity-70', 'cursor-not-allowed');
            }
        });
    });
</script>

<%- include('../partials/footer') %> 